clc
close all
clear
TextSize = 20;



Ym = 20;             %размер расчетной области по eta
Eps = 1e-6;         % заданная точность расчета
beta = 0.3;          % параметр нижней релаксации
NIterLim = 400;   % максимальное количество итераций

N = 1001;           %число узлов
M = 3;                %число уравнений
h = Ym / (N - 1);  %шаг сетки

%%
% инициализация переменных

%вектор решений на итерациях  n  n+1
UOld = zeros(N*M,1);
UNew = UOld;
%вектор правых частей
B = zeros(N*M,1);

%массив погрешностей
SErr = [];
%%

% основной итерационный цикл по нелинейности
step = 0;
while (step < NIterLim)
    step = step + 1;
    
        % обнуляем массивы описывающие разреженную матрицу
        indI = [];
        indJ = [];
        sIJ = [];
        % заполняем разреженную матрицу коэффициентами для внутренних точек
        for i = 1:(N-1)
            % --- ---------------------------------
            % индекс 1 ой переменной в узле i
            iL1 = (i - 1) * M + 1;
            % индекс 1й переменной справа от узла i
            iR1 = i * M + 1;
            
            % индекс 2 ой переменной в узле i
            iL2 = (i - 1) * M + 2;
            % индекс 2й переменной справа от узла i
            iR2 = i * M + 2;
            
            
            % индекс 3 й переменной в узле i
            iL3 = (i - 1) * M + 3;
            % индекс 3й переменной справа от узла i
            iR3 = i * M + 3;
            
            
            % --- ---------------------------------
            % первое ур-е 
            % номер уравнения (1е)
            iEq = (i - 1) * M + 1;
            
            % составляем 1е уравнение (разность вправо)
            indI = [indI iEq iEq iEq    iEq]; % номера уравнений
            indJ = [indJ iR1 iL1 iL2    iR2]; % номера переменных
            sIJ  = [sIJ  1   -1  -0.5*h -0.5*h]; % значение коэфф при переменных
            B(iEq) = 0;
            
            % --- ---------------------------------
            % 2е ур-е 
            iEq = (i-1)*M + 2;
            
            % составляем 1е уравнение 
            indI = [indI iEq iEq iEq    iEq];
            indJ = [indJ iR2 iL2 iR3    iL3];
            sIJ  = [sIJ  1   -1  -0.5*h -0.5*h];
            B(iEq) = 0;
            
            % --- ---------------------------------
            % 3е ур-е   На каждой итерации решаем линеаризованную систему
            iEq = (i - 1) * M + 3;
            
            % значение на предыдущей итерации
            Old1 = 0.5 * (UOld(iR1) + UOld(iL1));
            Old3 = 0.5 * (UOld(iR3) + UOld(iL3));
            %
            indI = [indI iEq                iEq                 iEq             iEq];
            indJ = [indJ iR3                iL3                 iR1             iL1];
            sIJ  = [sIJ  (1+0.25*h*Old1)    (-1+0.25*h*Old1)    0.25*h*Old3     0.25*h*Old3];
            B(iEq) = h * 0.5 * (Old1 .* Old3);
        end

        % добавляем граничные условия, добавляем в конец матрицы
        % -----
        % левые граничные условия
        % для f1                
        indI=[indI (N-1)*M+1];  % номер уравнения 
        indJ=[indJ 1]; % номер переменной где задано ГУ            
        sIJ=[sIJ 1];
        B((N-1)*M+1)=0; % значение ГУ
        
        %для f2  
        indI=[indI (N-1)*M+2];
        indJ=[indJ 2];
        sIJ=[sIJ 1];
        B((N-1)*M+2) = 0;
        
        % для f3 отсутсвует
            
        % -----
        % правые гу
        % для f2
        indI=[indI (N-1)*M+3]; % номер уравнения
        indJ=[indJ (N-1)*M+2]; % номер переменной (f2)
        sIJ=[sIJ 1];
        B((N-1)*M+3)=1; 
        
        % для f1, f3 не задано
    
        % --- ---------------------------------
        % формируем матрицу  
        A = sparse(indI,indJ,sIJ);
        % решение системы 
        UNew = A \ B;

    
   
    % погрешность
    z = max(abs(UOld-UNew));
    SErr = [SErr z];
    if(z < Eps)
        break;
    end
    % нижняя релаксация
    UOld=(1-beta)*UOld+beta*UNew;
end

%%


% извлечения решения из общего массива неизвестных
eta=(0:Ym/(N-1):Ym)';
f1=UOld((0:N-1)*M+1);
f2=UOld((0:N-1)*M+2);
f3=UOld((0:N-1)*M+3);




% Визуализация решения
figure(1)
plot(eta,f2,'-k','LineWidth',1,'MarkerSize',6)
grid on
set(gca,'FontSize',20)
title(['Распределение безразмерной продольной скорости'],'FontSize',TextSize)
xlabel('\eta','FontSize',TextSize)
ylabel('f_2','FontSize',TextSize)
xlim([0 7])
ylim([0 1.05])




figure(2)
plot(eta,0.5*(eta.*f2 - f1),'-k','LineWidth',1,'MarkerSize',6)
grid on
set(gca,'FontSize',20)
title(['Распределение безразмерной поперечной скорости'],'FontSize',TextSize)
xlabel('\eta','FontSize',TextSize)
ylabel('0.5(\eta f_2 - f_1)','FontSize',TextSize)
xlim([0 6])
ylim([0 0.86])



l = 1; 
nu = 1.006; 
U = 5; % скорость вшешнего течения (набегающего потока)
Re = U * l / nu; 
c = 1.328 / sqrt(Re); 
fprintf(['Коэффициент сопротивления = %f.'], c);

x = [0.1, 0.3, 0.5]; 
delta = sqrt(nu * x / U); %толщина погран слоя, м
y = eta * delta; %eta - безразмерная координата
u = f2 * U; %продольная скорость, f2 - безразмерная продольная скорость
















